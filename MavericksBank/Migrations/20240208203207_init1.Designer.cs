// <auto-generated />
using System;
using MavericksBank.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MavericksBank.Migrations
{
    [DbContext(typeof(RequestTrackerContext))]
    [Migration("20240208203207_init1")]
    partial class init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MavericksBank.Models.Accounts", b =>
                {
                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("IFSCCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountNumber");

                    b.HasIndex("CustomerID");

                    b.HasIndex("IFSCCode");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MavericksBank.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AdminID");

                    b.HasIndex("UserID");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("MavericksBank.Models.BankEmployee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("UserID");

                    b.ToTable("BankEmployee");
                });

            modelBuilder.Entity("MavericksBank.Models.Banks", b =>
                {
                    b.Property<int>("BankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankID"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankID");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("MavericksBank.Models.Beneficiaries", b =>
                {
                    b.Property<int>("BeneficiaryAccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("IFSCCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BeneficiaryAccountNumber");

                    b.HasIndex("CustomerID");

                    b.HasIndex("IFSCCode");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("MavericksBank.Models.Branches", b =>
                {
                    b.Property<string>("IFSCCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IFSCCode");

                    b.HasIndex("BankID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("MavericksBank.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Aadhaar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PANNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("UserID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MavericksBank.Models.Loan", b =>
                {
                    b.Property<int>("LoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanID"));

                    b.Property<float>("CalculateFinalAmount")
                        .HasColumnType("real");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<float>("LoanAmount")
                        .HasColumnType("real");

                    b.Property<int>("LoanPolicyID")
                        .HasColumnType("int");

                    b.Property<string>("LoanPurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenureInMonths")
                        .HasColumnType("int");

                    b.HasKey("LoanID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("LoanPolicyID");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("MavericksBank.Models.LoanPolicies", b =>
                {
                    b.Property<int>("LoanPolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanPolicyID"));

                    b.Property<float>("Interest")
                        .HasColumnType("real");

                    b.Property<float>("LoanAmount")
                        .HasColumnType("real");

                    b.Property<int>("TenureInMonths")
                        .HasColumnType("int");

                    b.HasKey("LoanPolicyID");

                    b.ToTable("LoanPolicies");
                });

            modelBuilder.Entity("MavericksBank.Models.Transactions", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("BeneficiaryAccountNumber")
                        .HasColumnType("int");

                    b.Property<int?>("BeneficiaryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SAccountID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionID");

                    b.HasIndex("BeneficiaryID");

                    b.HasIndex("SAccountID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MavericksBank.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<byte[]>("Key")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MavericksBank.Models.Accounts", b =>
                {
                    b.HasOne("MavericksBank.Models.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MavericksBank.Models.Branches", "Branches")
                        .WithMany("Accounts")
                        .HasForeignKey("IFSCCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branches");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MavericksBank.Models.Admin", b =>
                {
                    b.HasOne("MavericksBank.Models.Users", "Users")
                        .WithMany("Admins")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MavericksBank.Models.BankEmployee", b =>
                {
                    b.HasOne("MavericksBank.Models.Users", "Users")
                        .WithMany("BankEmployees")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MavericksBank.Models.Beneficiaries", b =>
                {
                    b.HasOne("MavericksBank.Models.Customer", "Customer")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MavericksBank.Models.Branches", "Branch")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("IFSCCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MavericksBank.Models.Branches", b =>
                {
                    b.HasOne("MavericksBank.Models.Banks", "Banks")
                        .WithMany("Branches")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banks");
                });

            modelBuilder.Entity("MavericksBank.Models.Customer", b =>
                {
                    b.HasOne("MavericksBank.Models.Users", "Users")
                        .WithMany("Customers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MavericksBank.Models.Loan", b =>
                {
                    b.HasOne("MavericksBank.Models.Customer", "Customer")
                        .WithMany("Loans")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MavericksBank.Models.LoanPolicies", "LoanPolicies")
                        .WithMany("Loans")
                        .HasForeignKey("LoanPolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LoanPolicies");
                });

            modelBuilder.Entity("MavericksBank.Models.Transactions", b =>
                {
                    b.HasOne("MavericksBank.Models.Beneficiaries", "Beneficiaries")
                        .WithMany("Transactions")
                        .HasForeignKey("BeneficiaryID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MavericksBank.Models.Accounts", "SourceAccount")
                        .WithMany("RecievedTransactions")
                        .HasForeignKey("SAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficiaries");

                    b.Navigation("SourceAccount");
                });

            modelBuilder.Entity("MavericksBank.Models.Accounts", b =>
                {
                    b.Navigation("RecievedTransactions");
                });

            modelBuilder.Entity("MavericksBank.Models.Banks", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("MavericksBank.Models.Beneficiaries", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MavericksBank.Models.Branches", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("MavericksBank.Models.Customer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Beneficiaries");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("MavericksBank.Models.LoanPolicies", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("MavericksBank.Models.Users", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("BankEmployees");

                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
